version: "3.8"
services:
  frontend:
    build:
      context: ./frontend
      target: development
    ports:
      - "3000:3000"
    depends_on:
      - api
    volumes:
      - ./frontend:/app
      - ./frontend/node_modules:/app/node_modules
      - ./frontend/.next:/app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_ENDPOINT=http://localhost:3333
    networks:
      - app

  api:
    image: cosmtrek/air
    working_dir: /captura-books-api
    ports:
      - "3333:3333"
    environment:
      - DATABASE_URL=postgres://postgres:u!73bG2sanDaL8)d50ax@postgres:5432/development
    volumes:
      - ./api/:/captura-books-api/
    depends_on:
      - postgres
    networks:
      - app

  # api:
  #   build: ./api
  #   ports:
  #     - "3333:3333"
  #   volumes:
  #     - ./api:/app
  #   environment:
  #     - DATABASE_URL=postgres://postgres:u!73bG2sanDaL8)d50ax@postgres:5432/development
  #   depends_on:
  #     - postgres
  #   networks:
  #     - app

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: development
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: u!73bG2sanDaL8)d50ax
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app

  migrate:
    image: migrate/migrate:v4.15.2
    volumes:
      - ./api/migrations:/migrations
    entrypoint:
      [
        "migrate",
        "-path",
        "/migrations",
        "-database",
        "postgres://postgres:u!73bG2sanDaL8)d50ax@postgres:5432/development?sslmode=disable",
      ]
    command: ["up"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app
    restart: on-failure

networks:
  app:
